from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from rest_framework.response import Response
from rest_framework.views import APIView
from django.shortcuts import get_object_or_404
from django.utils import timezone
from django.db.models import Count, Q
from django.core.paginator import Paginator
import uuid
import logging

from .models import AIConversation, AIMessage, AIAction, UserPreference, AIKnowledgeBase
from .serializers import (
    AIConversationSerializer, AIMessageSerializer, ChatRequestSerializer,
    ChatResponseSerializer, UserPreferenceSerializer, AIKnowledgeBaseSerializer
)
from .ai_service import AIResponseGenerator, AIProductSearchService, AISizeRecommendationService
from api.models import Product
from api.serializers import ProductSerializer

logger = logging.getLogger(__name__)


@api_view(['GET'])
def test_ai_endpoint(request):
    """Test endpoint ƒë·ªÉ ki·ªÉm tra AI chat c√≥ ho·∫°t ƒë·ªông kh√¥ng - KH√îNG C·∫¶N AUTH"""
    try:
        # Test import Product model
        from api.models import Product
        product_count = Product.objects.count()
        import_status = f"‚úÖ Product model OK - {product_count} products"
    except Exception as e:
        import_status = f"‚ùå Product model error: {str(e)}"

    return Response({
        'status': 'success',
        'message': 'AI Chat endpoint is working!',
        'import_status': import_status,
        'user': request.user.username if request.user.is_authenticated else 'Anonymous'
    })


@api_view(['POST'])
def debug_ai_chat(request):
    """Debug endpoint ƒë·ªÉ test AI chat - KH√îNG C·∫¶N AUTH"""
    try:
        message = request.data.get('message', 'test')

        # Test import
        try:
            from api.models import Product
            product_count = Product.objects.count()
            import_status = f"‚úÖ Product model imported. Found {product_count} products"
        except Exception as e:
            import_status = f"‚ùå Cannot import Product model: {str(e)}"

        # Test AI response
        try:
            chat_view = AIChatView()
            response = chat_view._generate_smart_response(message, 'test-session', request.user)
            ai_status = "‚úÖ AI response generated successfully"
        except Exception as e:
            ai_status = f"‚ùå AI response error: {str(e)}"
            response = {"error": str(e)}

        return Response({
            'message': message,
            'import_status': import_status,
            'ai_status': ai_status,
            'ai_response': response,
            'user': request.user.username if request.user.is_authenticated else 'Anonymous'
        })

    except Exception as e:
        return Response({
            'error': f"Debug error: {str(e)}",
            'message': 'Debug endpoint failed'
        }, status=500)


@api_view(['POST'])
def test_product_search(request):
    """Test product search without authentication"""
    try:
        message = request.data.get('message', 't√¨m √°o')

        # Test Smart AI response generation
        from .smart_ai_service import smart_ai
        response = smart_ai.process_message(message, None)

        return Response({
            'status': 'success',
            'message': message,
            'ai_response': response,
            'timestamp': timezone.now()
        })

    except Exception as e:
        import traceback
        return Response({
            'status': 'error',
            'message': message if 'message' in locals() else 'unknown',
            'error': str(e),
            'traceback': traceback.format_exc(),
            'timestamp': timezone.now()
        }, status=500)


class AIChatView(APIView):
    """Main API endpoint cho AI chatbox"""
    permission_classes = [IsAuthenticated]
    
    def post(self, request):
        """G·ª≠i tin nh·∫Øn ƒë·∫øn AI v√† nh·∫≠n ph·∫£n h·ªìi"""
        logger.info(f"AI Chat request from user: {request.user}")
        logger.info(f"Request data: {request.data}")

        serializer = ChatRequestSerializer(data=request.data)
        if not serializer.is_valid():
            logger.error(f"Serializer validation errors: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        
        user_message = serializer.validated_data['message']
        session_id = serializer.validated_data.get('session_id')
        context = serializer.validated_data.get('context', {})

        # Handle null or empty session_id
        if not session_id or session_id == 'null':
            session_id = None
        
        try:
            # T·∫°o session_id n·∫øu ch∆∞a c√≥
            if not session_id:
                session_id = str(uuid.uuid4())

            # S·ª≠ d·ª•ng Smart AI Service
            from .smart_ai_service import smart_ai
            ai_response = smart_ai.process_message(user_message, request.user)

            # T·∫°o response
            response_data = {
                'message': ai_response['message'],
                'session_id': session_id,
                'message_type': 'ai',
                'actions_taken': ai_response.get('actions_taken', []),
                'suggested_products': ai_response.get('suggested_products', []),
                'quick_replies': ai_response.get('quick_replies', []),
                'metadata': ai_response.get('metadata', {})
            }

            return Response(response_data, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Error in AI chat: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def _generate_smart_response(self, message, session_id, user=None):
        """T·∫°o ph·∫£n h·ªìi AI th√¥ng minh v·ªõi t√¨m ki·∫øm s·∫£n ph·∫©m th·ª±c"""
        try:
            message_lower = message.lower()

            # Ph√¢n t√≠ch intent v√† t√¨m ki·∫øm s·∫£n ph·∫©m
            if any(word in message_lower for word in ['t√¨m', 'search', 's·∫£n ph·∫©m', '√°o', 'qu·∫ßn', 'gi√†y', 'mua', 'c·∫ßn']):
                return self._handle_product_search_safe(message, message_lower)

            # C√°c intent kh√°c gi·ªØ nguy√™n
            return self._generate_simple_response(message, session_id)
        except Exception as e:
            logger.error(f"Error in _generate_smart_response: {str(e)}")
            # Fallback to simple response
            return self._generate_simple_response(message, session_id)

    def _handle_product_search(self, message, message_lower):
        """X·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m th·ª±c"""
        from api.models import Product, Brand, Category
        from django.db.models import Q

        # Ph√¢n t√≠ch m√†u s·∫Øc
        colors = self._extract_colors(message_lower)

        # Ph√¢n t√≠ch kho·∫£ng gi√°
        price_range = self._extract_price_range(message_lower)

        # T√¨m ki·∫øm s·∫£n ph·∫©m
        search_q = Q()
        keywords = message_lower.split()

        # T√¨m theo t·ª´ kh√≥a
        for keyword in keywords:
            if len(keyword) > 2 and keyword not in ['m√†u', 'color', 'gi√°', 'price', 'vnd', 'ƒë·ªìng']:
                search_q |= (
                    Q(name__icontains=keyword) |
                    Q(description__icontains=keyword) |
                    Q(brand__name__icontains=keyword) |
                    Q(category__title__icontains=keyword)
                )

        # N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a c·ª• th·ªÉ, t√¨m theo category chung
        if not search_q:
            if any(word in message_lower for word in ['√°o', 'shirt', 'top']):
                search_q = Q(category__title__icontains='√°o')
            elif any(word in message_lower for word in ['qu·∫ßn', 'pants', 'jean']):
                search_q = Q(category__title__icontains='qu·∫ßn')
            elif any(word in message_lower for word in ['gi√†y', 'shoes', 'sneaker']):
                search_q = Q(category__title__icontains='gi√†y')
            else:
                search_q = Q()  # T√¨m t·∫•t c·∫£ s·∫£n ph·∫©m

        # √Åp d·ª•ng filter
        products = Product.objects.all()

        if search_q:
            products = products.filter(search_q)

        # Filter theo m√†u s·∫Øc (n·∫øu c√≥ variants)
        if colors:
            color_filter = Q()
            for color in colors:
                color_filter |= Q(productvariant__color__name__icontains=color)
            products = products.filter(color_filter)

        # Filter theo gi√°
        if price_range:
            min_price, max_price = price_range
            products = products.filter(price__gte=min_price, price__lte=max_price)

        # L·∫•y s·∫£n ph·∫©m
        products = products.distinct()[:6]  # L·∫•y t·ªëi ƒëa 6 s·∫£n ph·∫©m

        if products:
            # Serialize s·∫£n ph·∫©m
            from api.serializers import ProductSerializer
            products_data = ProductSerializer(products, many=True).data

            # T·∫°o message v·ªõi link s·∫£n ph·∫©m
            product_count = len(products)

            # T·∫°o th√¥ng tin filter
            filter_info = []
            if colors:
                filter_info.append(f"m√†u {', '.join(colors)}")
            if price_range:
                min_p, max_p = price_range
                filter_info.append(f"gi√° {min_p//1000}k-{max_p//1000}k")

            filter_text = f" ({', '.join(filter_info)})" if filter_info else ""

            message_text = f"üõçÔ∏è T√¥i t√¨m th·∫•y **{product_count} s·∫£n ph·∫©m**{filter_text} ph√π h·ª£p:\n\n"

            for i, product in enumerate(products_data[:3], 1):  # Hi·ªÉn th·ªã 3 s·∫£n ph·∫©m ƒë·∫ßu trong text
                price = f"{int(product['price']):,}" if product['price'] else "Li√™n h·ªá"
                message_text += f"{i}. **{product['name']}**\n"
                message_text += f"   üí∞ {price} VND\n"
                message_text += f"   üëâ [Xem chi ti·∫øt & mua ngay](/#/products/{product['id']})\n\n"

            if product_count > 3:
                message_text += f"...v√† **{product_count - 3} s·∫£n ph·∫©m kh√°c** b√™n d∆∞·ªõi. Click v√†o s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt!"

            return {
                'message': message_text,
                'quick_replies': ['Xem chi ti·∫øt', 'L·ªçc theo gi√°', 'T√¨m s·∫£n ph·∫©m kh√°c', 'H·ªó tr·ª£ ch·ªçn size'],
                'suggested_products': products_data,  # G·ª≠i data s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã cards
                'actions_taken': [{'type': 'product_search', 'query': message, 'results_count': product_count}],
                'metadata': {'intent': 'product_search', 'products_found': product_count}
            }
        else:
            return {
                'message': 'Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠:\n\n‚Ä¢ M√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ s·∫£n ph·∫©m\n‚Ä¢ T√¨m theo danh m·ª•c (√°o, qu·∫ßn, gi√†y...)\n‚Ä¢ T√¨m theo th∆∞∆°ng hi·ªáu\n‚Ä¢ Xem c√°c s·∫£n ph·∫©m hot hi·ªán t·∫°i',
                'quick_replies': ['Xem s·∫£n ph·∫©m hot', 'T√¨m theo danh m·ª•c', 'T√¨m theo th∆∞∆°ng hi·ªáu', 'Li√™n h·ªá h·ªó tr·ª£'],
                'actions_taken': [{'type': 'product_search', 'query': message, 'results_count': 0}],
                'metadata': {'intent': 'product_search', 'products_found': 0}
            }

    def _extract_colors(self, message_lower):
        """Tr√≠ch xu·∫•t m√†u s·∫Øc t·ª´ tin nh·∫Øn"""
        colors = []
        color_keywords = {
            'ƒë·ªè': ['ƒë·ªè', 'red'],
            'xanh': ['xanh', 'blue', 'xanh d∆∞∆°ng', 'xanh da tr·ªùi'],
            'xanh l√°': ['xanh l√°', 'green', 'xanh l·ª•c'],
            'v√†ng': ['v√†ng', 'yellow'],
            'ƒëen': ['ƒëen', 'black'],
            'tr·∫Øng': ['tr·∫Øng', 'white'],
            'x√°m': ['x√°m', 'gray', 'grey'],
            'n√¢u': ['n√¢u', 'brown'],
            'h·ªìng': ['h·ªìng', 'pink'],
            't√≠m': ['t√≠m', 'purple'],
            'cam': ['cam', 'orange']
        }

        for color, keywords in color_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                colors.append(color)

        return colors

    def _extract_price_range(self, message_lower):
        """Tr√≠ch xu·∫•t kho·∫£ng gi√° t·ª´ tin nh·∫Øn"""
        import re

        # Pattern cho c√°c c√°ch n√≥i v·ªÅ gi√°
        patterns = [
            r'd∆∞·ªõi\s+(\d+)k?',
            r't·ª´\s+(\d+)k?\s+ƒë·∫øn\s+(\d+)k?',
            r'kho·∫£ng\s+(\d+)k?',
            r'(\d+)k?\s*-\s*(\d+)k?',
            r'r·∫ª',  # Gi√° r·∫ª
            r'ƒë·∫Øt'  # Gi√° ƒë·∫Øt
        ]

        for pattern in patterns:
            match = re.search(pattern, message_lower)
            if match:
                if pattern == r'r·∫ª':
                    return (0, 500000)  # D∆∞·ªõi 500k
                elif pattern == r'ƒë·∫Øt':
                    return (1000000, 10000000)  # Tr√™n 1 tri·ªáu

                groups = match.groups()
                if len(groups) == 1:
                    price = int(groups[0]) * 1000
                    if 'd∆∞·ªõi' in pattern:
                        return (0, price)
                    else:
                        return (price - 100000, price + 100000)
                elif len(groups) == 2:
                    min_price = int(groups[0]) * 1000
                    max_price = int(groups[1]) * 1000
                    return (min_price, max_price)

        return None

    def _handle_product_search_safe(self, message, message_lower):
        """X·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m an to√†n v·ªõi fallback"""
        try:
            # Import trong try block ƒë·ªÉ tr√°nh l·ªói
            from api.models import Product
            from django.db.models import Q

            # T√¨m ki·∫øm ƒë∆°n gi·∫£n
            keywords = [word for word in message_lower.split() if len(word) > 2]

            if not keywords:
                return self._no_products_found_response(message)

            # T·∫°o query ƒë∆°n gi·∫£n
            search_q = Q()
            for keyword in keywords[:3]:  # Ch·ªâ l·∫•y 3 t·ª´ kh√≥a ƒë·∫ßu
                if keyword not in ['t√¨m', 'search', 'm√†u', 'color']:
                    search_q |= Q(name__icontains=keyword)

            # T√¨m s·∫£n ph·∫©m
            products = Product.objects.filter(search_q).distinct()[:5]

            if products.exists():
                return self._format_products_response(products, message)
            else:
                return self._no_products_found_response(message)

        except ImportError:
            logger.error("Cannot import Product model")
            return self._fallback_product_response(message)
        except Exception as e:
            logger.error(f"Error in product search: {str(e)}")
            return self._fallback_product_response(message)

    def _format_products_response(self, products, original_message):
        """Format response v·ªõi s·∫£n ph·∫©m t√¨m ƒë∆∞·ª£c"""
        try:
            from api.serializers import ProductSerializer
            products_data = ProductSerializer(products, many=True).data

            product_count = len(products_data)
            message_text = f"üõçÔ∏è T√¥i t√¨m th·∫•y **{product_count} s·∫£n ph·∫©m** ph√π h·ª£p:\n\n"

            for i, product in enumerate(products_data[:3], 1):
                price = f"{int(product['price']):,}" if product.get('price') else "Li√™n h·ªá"
                message_text += f"{i}. **{product['name']}**\n"
                message_text += f"   üí∞ {price} VND\n"
                message_text += f"   üëâ [Xem chi ti·∫øt](/#/products/{product['id']})\n\n"

            if product_count > 3:
                message_text += f"...v√† **{product_count - 3} s·∫£n ph·∫©m kh√°c** b√™n d∆∞·ªõi!"

            return {
                'message': message_text,
                'quick_replies': ['Xem chi ti·∫øt', 'L·ªçc theo gi√°', 'T√¨m s·∫£n ph·∫©m kh√°c'],
                'suggested_products': products_data,
                'actions_taken': [{'type': 'product_search', 'query': original_message, 'results_count': product_count}],
                'metadata': {'intent': 'product_search', 'products_found': product_count}
            }
        except Exception as e:
            logger.error(f"Error formatting products: {str(e)}")
            return self._fallback_product_response(original_message)

    def _no_products_found_response(self, message):
        """Response khi kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"""
        return {
            'message': 'Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p. B·∫°n c√≥ th·ªÉ th·ª≠:\n\n‚Ä¢ M√¥ t·∫£ chi ti·∫øt h∆°n\n‚Ä¢ T√¨m theo danh m·ª•c\n‚Ä¢ Xem s·∫£n ph·∫©m hot',
            'quick_replies': ['S·∫£n ph·∫©m hot', '√Åo', 'Qu·∫ßn', 'Gi√†y'],
            'actions_taken': [{'type': 'product_search', 'query': message, 'results_count': 0}],
            'metadata': {'intent': 'product_search', 'products_found': 0}
        }

    def _fallback_product_response(self, message):
        """Fallback response khi c√≥ l·ªói"""
        return {
            'message': 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m! Hi·ªán t·∫°i h·ªá th·ªëng ƒëang c·∫≠p nh·∫≠t, b·∫°n c√≥ th·ªÉ:\n\n‚Ä¢ Xem danh m·ª•c s·∫£n ph·∫©m\n‚Ä¢ Li√™n h·ªá h·ªó tr·ª£\n‚Ä¢ Th·ª≠ l·∫°i sau',
            'quick_replies': ['Danh m·ª•c s·∫£n ph·∫©m', 'Li√™n h·ªá h·ªó tr·ª£', 'Th·ª≠ l·∫°i'],
            'actions_taken': [{'type': 'product_search_error', 'query': message}],
            'metadata': {'intent': 'product_search', 'error': True}
        }

    def _generate_database_response(self, message, session_id, user, context):
        """T·∫°o ph·∫£n h·ªìi AI v·ªõi t√¨m ki·∫øm database th·ª±c"""
        try:
            message_lower = message.lower()

            # Detect intent
            intent = self._detect_intent(message_lower)

            if intent == 'product_search':
                return self._handle_database_product_search(message, message_lower, user)
            elif intent == 'greeting':
                return self._handle_greeting_response(message)
            elif intent == 'size_help':
                return self._handle_size_help_response(message)
            else:
                return self._handle_general_response(message)

        except Exception as e:
            logger.error(f"Error in database response: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return self._generate_fallback_response(message, session_id)

    def _detect_intent(self, message_lower):
        """Detect intent t·ª´ message"""
        if any(word in message_lower for word in ['t√¨m', 'search', 's·∫£n ph·∫©m', '√°o', 'qu·∫ßn', 'gi√†y', 'mua', 'c·∫ßn', 'c√≥', 'b√°n']):
            return 'product_search'
        elif any(word in message_lower for word in ['xin ch√†o', 'hello', 'hi', 'ch√†o']):
            return 'greeting'
        elif any(word in message_lower for word in ['size', 'c·ª°', 's·ªë', 'k√≠ch th∆∞·ªõc']):
            return 'size_help'
        else:
            return 'general'

    def _handle_database_product_search(self, message, message_lower, user):
        """X·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m t·ª´ database th·ª±c"""
        try:
            from api.models import Product, Brand, Category
            from django.db.models import Q
            from api.serializers import ProductSerializer

            # Extract entities t·ª´ database
            entities = self._extract_entities_from_database(message_lower)

            # Build query
            query = Q()

            # T√¨m theo keywords
            keywords = [word for word in message_lower.split() if len(word) > 2]
            for keyword in keywords:
                if keyword not in ['t√¨m', 'c√≥', 'b√°n', 'shop', 'm√†u', 'size', 'c·ª°']:
                    query |= (
                        Q(name__icontains=keyword) |
                        Q(description__icontains=keyword)
                    )

            # Filter theo m√†u s·∫Øc
            if entities['colors']:
                color_query = Q()
                for color in entities['colors']:
                    # T√¨m trong t√™n s·∫£n ph·∫©m ho·∫∑c variants
                    color_query |= Q(name__icontains=color)
                    try:
                        color_query |= Q(productvariant__color__name__icontains=color)
                    except:
                        pass  # N·∫øu kh√¥ng c√≥ ProductVariant model
                query &= color_query

            # Filter theo th∆∞∆°ng hi·ªáu
            if entities['brands']:
                brand_query = Q()
                for brand in entities['brands']:
                    try:
                        brand_query |= Q(brand__name__icontains=brand)
                    except:
                        # Fallback: t√¨m trong t√™n s·∫£n ph·∫©m
                        brand_query |= Q(name__icontains=brand)
                query &= brand_query

            # Filter theo category
            if entities['categories']:
                cat_query = Q()
                for category in entities['categories']:
                    try:
                        cat_query |= Q(category__title__icontains=category)
                    except:
                        # Fallback: t√¨m trong t√™n s·∫£n ph·∫©m
                        cat_query |= Q(name__icontains=category)
                query &= cat_query

            # Filter theo gi√°
            if entities['price_range']:
                min_price, max_price = entities['price_range']
                query &= Q(price__gte=min_price, price__lte=max_price)

            # T√¨m s·∫£n ph·∫©m
            if query:
                products = Product.objects.filter(query).distinct()[:6]
            else:
                # N·∫øu kh√¥ng c√≥ query c·ª• th·ªÉ, l·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t
                products = Product.objects.all().order_by('-id')[:6]

            if products.exists():
                # Serialize products
                products_data = ProductSerializer(products, many=True).data

                # T·∫°o response message
                filter_info = []
                if entities['colors']:
                    filter_info.append(f"m√†u {', '.join(entities['colors'])}")
                if entities['brands']:
                    filter_info.append(f"th∆∞∆°ng hi·ªáu {', '.join(entities['brands'])}")
                if entities['categories']:
                    filter_info.append(f"lo·∫°i {', '.join(entities['categories'])}")
                if entities['price_range']:
                    min_p, max_p = entities['price_range']
                    filter_info.append(f"gi√° {min_p//1000}k-{max_p//1000}k")

                filter_text = f" ({', '.join(filter_info)})" if filter_info else ""

                message_text = f"üõçÔ∏è T√¥i t√¨m th·∫•y **{len(products)} s·∫£n ph·∫©m**{filter_text} ph√π h·ª£p:\n\n"

                # Hi·ªÉn th·ªã 3 s·∫£n ph·∫©m ƒë·∫ßu
                for i, product in enumerate(products_data[:3], 1):
                    price = f"{int(product['price']):,}" if product.get('price') else "Li√™n h·ªá"
                    message_text += f"{i}. **{product['name']}**\n"
                    message_text += f"   üí∞ {price} VND\n"
                    message_text += f"   üëâ [Xem chi ti·∫øt & mua ngay](/#/products/{product['id']})\n\n"

                if len(products) > 3:
                    message_text += f"...v√† **{len(products) - 3} s·∫£n ph·∫©m kh√°c** b√™n d∆∞·ªõi!"

                return {
                    'message': message_text,
                    'suggested_products': products_data,
                    'quick_replies': ['Xem chi ti·∫øt', 'L·ªçc theo gi√°', 'T√¨m s·∫£n ph·∫©m kh√°c', 'H·ªó tr·ª£ ch·ªçn size'],
                    'actions_taken': [{'type': 'product_search', 'query': message, 'results_count': len(products)}],
                    'metadata': {'intent': 'product_search', 'entities': entities, 'products_found': len(products)}
                }
            else:
                return {
                    'message': 'Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p. B·∫°n c√≥ th·ªÉ th·ª≠:\n\n‚Ä¢ M√¥ t·∫£ chi ti·∫øt h∆°n\n‚Ä¢ T√¨m theo danh m·ª•c\n‚Ä¢ Xem s·∫£n ph·∫©m hot',
                    'quick_replies': ['S·∫£n ph·∫©m hot', '√Åo', 'Qu·∫ßn', 'Gi√†y', 'Li√™n h·ªá h·ªó tr·ª£'],
                    'actions_taken': [{'type': 'product_search', 'query': message, 'results_count': 0}],
                    'metadata': {'intent': 'product_search', 'entities': entities, 'products_found': 0}
                }

        except Exception as e:
            logger.error(f"Error in database product search: {str(e)}")
            return self._generate_fallback_response(message, 'fallback')

    def _extract_entities_from_database(self, message_lower):
        """Extract entities v√† validate v·ªõi database"""
        entities = {
            'colors': [],
            'brands': [],
            'categories': [],
            'sizes': [],
            'price_range': None
        }

        # Extract m√†u s·∫Øc
        color_keywords = {
            'ƒë·ªè': ['ƒë·ªè', 'red'],
            'xanh': ['xanh', 'blue', 'xanh d∆∞∆°ng', 'navy'],
            'xanh l√°': ['xanh l√°', 'green'],
            'v√†ng': ['v√†ng', 'yellow'],
            'ƒëen': ['ƒëen', 'black'],
            'tr·∫Øng': ['tr·∫Øng', 'white'],
            'x√°m': ['x√°m', 'gray', 'grey'],
            'n√¢u': ['n√¢u', 'brown'],
            'h·ªìng': ['h·ªìng', 'pink'],
            't√≠m': ['t√≠m', 'purple'],
            'cam': ['cam', 'orange']
        }

        for color, keywords in color_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                entities['colors'].append(color)

        # Extract th∆∞∆°ng hi·ªáu t·ª´ database
        try:
            from api.models import Brand
            brands = Brand.objects.all()
            for brand in brands:
                if brand.name.lower() in message_lower:
                    entities['brands'].append(brand.name)
        except:
            # Fallback: hardcoded brands
            brand_keywords = ['nike', 'adidas', 'zara', 'h&m', 'uniqlo', 'gucci', 'puma', 'converse']
            for brand in brand_keywords:
                if brand in message_lower:
                    entities['brands'].append(brand)

        # Extract categories t·ª´ database
        try:
            from api.models import Category
            categories = Category.objects.all()
            for category in categories:
                if category.title.lower() in message_lower:
                    entities['categories'].append(category.title)
        except:
            # Fallback: hardcoded categories
            if any(word in message_lower for word in ['√°o', 'shirt', 'top']):
                entities['categories'].append('√°o')
            if any(word in message_lower for word in ['qu·∫ßn', 'pants', 'jean']):
                entities['categories'].append('qu·∫ßn')
            if any(word in message_lower for word in ['gi√†y', 'shoes', 'sneaker']):
                entities['categories'].append('gi√†y')

        # Extract sizes
        import re
        size_patterns = [
            r'size\s*([smlxl]+|\d+)',
            r'c·ª°\s*([smlxl]+|\d+)',
            r's·ªë\s*(\d+)',
            r'\b([smlxl]{1,3})\b'
        ]

        for pattern in size_patterns:
            matches = re.findall(pattern, message_lower)
            for match in matches:
                size = match.upper() if isinstance(match, str) else str(match).upper()
                if size and size not in entities['sizes']:
                    entities['sizes'].append(size)

        # Extract price range
        entities['price_range'] = self._extract_price_range(message_lower)

        return entities

    def _extract_price_range(self, message_lower):
        """Extract price range t·ª´ message"""
        import re

        patterns = [
            r'd∆∞·ªõi\s+(\d+)k?',
            r't·ª´\s+(\d+)k?\s+ƒë·∫øn\s+(\d+)k?',
            r'kho·∫£ng\s+(\d+)k?',
            r'(\d+)k?\s*-\s*(\d+)k?',
            r'r·∫ª',
            r'ƒë·∫Øt'
        ]

        for pattern in patterns:
            match = re.search(pattern, message_lower)
            if match:
                if pattern == r'r·∫ª':
                    return (0, 500000)
                elif pattern == r'ƒë·∫Øt':
                    return (1000000, 10000000)

                groups = match.groups()
                if len(groups) == 1:
                    price = int(groups[0]) * 1000
                    if 'd∆∞·ªõi' in pattern:
                        return (0, price)
                    else:
                        return (price - 100000, price + 100000)
                elif len(groups) == 2:
                    min_price = int(groups[0]) * 1000
                    max_price = int(groups[1]) * 1000
                    return (min_price, max_price)

        return None

    def _handle_greeting_response(self, message):
        """X·ª≠ l√Ω l·ªùi ch√†o"""
        return {
            'message': 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa shop. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m, ch·ªçn size, v√† h·ªó tr·ª£ ƒë·∫∑t h√†ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
            'quick_replies': ['T√¨m s·∫£n ph·∫©m', 'H·ªó tr·ª£ ch·ªçn size', 'Ki·ªÉm tra ƒë∆°n h√†ng', 'Xem khuy·∫øn m√£i'],
            'actions_taken': [{'type': 'greeting', 'message': message}],
            'metadata': {'intent': 'greeting'}
        }

    def _handle_size_help_response(self, message):
        """X·ª≠ l√Ω h·ªó tr·ª£ size"""
        return {
            'message': 'T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n ch·ªçn size ph√π h·ª£p! B·∫°n ƒëang quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o? T√¥i s·∫Ω cung c·∫•p b·∫£ng size chi ti·∫øt v√† h∆∞·ªõng d·∫´n ƒëo size.',
            'quick_replies': ['Size √°o', 'Size qu·∫ßn', 'Size gi√†y', 'H∆∞·ªõng d·∫´n ƒëo'],
            'actions_taken': [{'type': 'size_help', 'query': message}],
            'metadata': {'intent': 'size_help'}
        }

    def _handle_general_response(self, message):
        """X·ª≠ l√Ω c√¢u h·ªèi chung"""
        return {
            'message': 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m, ch·ªçn size, h·ªó tr·ª£ ƒë·∫∑t h√†ng, v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ shop. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ?',
            'quick_replies': ['T√¨m s·∫£n ph·∫©m', 'H·ªó tr·ª£ ch·ªçn size', 'H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng', 'Li√™n h·ªá h·ªó tr·ª£'],
            'actions_taken': [{'type': 'general_help', 'query': message}],
            'metadata': {'intent': 'general'}
        }

    def _generate_fallback_response(self, message, session_id):
        """Fallback response khi c√≥ l·ªói"""
        return {
            'message': 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa shop. Hi·ªán t·∫°i h·ªá th·ªëng ƒëang c·∫≠p nh·∫≠t m·ªôt s·ªë t√≠nh nƒÉng. B·∫°n c√≥ th·ªÉ:\n\n‚Ä¢ Xem s·∫£n ph·∫©m tr√™n website\n‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ tr·ª±c ti·∫øp\n‚Ä¢ Th·ª≠ l·∫°i sau',
            'quick_replies': ['Xem s·∫£n ph·∫©m', 'Li√™n h·ªá h·ªó tr·ª£', 'Th·ª≠ l·∫°i'],
            'actions_taken': [{'type': 'fallback', 'message': message}],
            'metadata': {'intent': 'fallback', 'session_id': session_id}
        }

    def _generate_simple_response(self, message, session_id):
        """T·∫°o ph·∫£n h·ªìi AI ƒë∆°n gi·∫£n kh√¥ng c·∫ßn database"""
        message_lower = message.lower()

        # Ph·∫£n h·ªìi d·ª±a tr√™n t·ª´ kh√≥a
        if any(word in message_lower for word in ['xin ch√†o', 'hello', 'hi', 'ch√†o']):
            return {
                'message': f'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa shop. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m, ch·ªçn size, v√† h·ªó tr·ª£ ƒë·∫∑t h√†ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
                'quick_replies': ['T√¨m s·∫£n ph·∫©m', 'H·ªó tr·ª£ ch·ªçn size', 'Ki·ªÉm tra ƒë∆°n h√†ng', 'Xem khuy·∫øn m√£i'],
                'actions_taken': [{'type': 'greeting', 'message': message}],
                'metadata': {'intent': 'greeting'}
            }

        elif any(word in message_lower for word in ['t√¨m', 'search', 's·∫£n ph·∫©m', '√°o', 'qu·∫ßn', 'gi√†y']):
            return {
                'message': 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m! B·∫°n ƒëang t√¨m lo·∫°i s·∫£n ph·∫©m n√†o? H√£y m√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ m√†u s·∫Øc, k√≠ch th∆∞·ªõc, ho·∫∑c gi√° c·∫£ mong mu·ªën.',
                'quick_replies': ['√Åo thun', 'Qu·∫ßn jean', 'Gi√†y sneaker', 'Ph·ª• ki·ªán'],
                'actions_taken': [{'type': 'product_search', 'query': message}],
                'metadata': {'intent': 'product_search'}
            }

        elif any(word in message_lower for word in ['size', 'c·ª°', 's·ªë', 'k√≠ch th∆∞·ªõc']):
            return {
                'message': 'T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n ch·ªçn size ph√π h·ª£p! B·∫°n ƒëang quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o? T√¥i s·∫Ω cung c·∫•p b·∫£ng size chi ti·∫øt v√† h∆∞·ªõng d·∫´n ƒëo size.',
                'quick_replies': ['Size √°o', 'Size qu·∫ßn', 'Size gi√†y', 'H∆∞·ªõng d·∫´n ƒëo'],
                'actions_taken': [{'type': 'size_help', 'query': message}],
                'metadata': {'intent': 'size_help'}
            }

        elif any(word in message_lower for word in ['khuy·∫øn m√£i', 'sale', 'gi·∫£m gi√°', '∆∞u ƒë√£i']):
            return {
                'message': 'Hi·ªán t·∫°i ch√∫ng t√¥i c√≥ nhi·ªÅu ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·∫•p d·∫´n! Gi·∫£m gi√° l√™n ƒë·∫øn 50% cho c√°c s·∫£n ph·∫©m th·ªùi trang. B·∫°n c√≥ th·ªÉ xem th√™m t·∫°i trang ch·ªß ho·∫∑c ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o.',
                'quick_replies': ['Xem khuy·∫øn m√£i', 'ƒêƒÉng k√Ω nh·∫≠n tin', 'S·∫£n ph·∫©m sale', 'M√£ gi·∫£m gi√°'],
                'actions_taken': [{'type': 'promotion_inquiry', 'query': message}],
                'metadata': {'intent': 'promotion'}
            }

        elif any(word in message_lower for word in ['ƒë·∫∑t h√†ng', 'order', 'mua', 'thanh to√°n']):
            return {
                'message': 'T√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n b·∫°n ƒë·∫∑t h√†ng! Quy tr√¨nh r·∫•t ƒë∆°n gi·∫£n: Ch·ªçn s·∫£n ph·∫©m ‚Üí Th√™m v√†o gi·ªè ‚Üí ƒêi·ªÅn th√¥ng tin ‚Üí Thanh to√°n. B·∫°n c·∫ßn h·ªó tr·ª£ b∆∞·ªõc n√†o?',
                'quick_replies': ['H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng', 'Ph∆∞∆°ng th·ª©c thanh to√°n', 'Ki·ªÉm tra gi·ªè h√†ng', 'Theo d√µi ƒë∆°n'],
                'actions_taken': [{'type': 'order_help', 'query': message}],
                'metadata': {'intent': 'order_help'}
            }

        else:
            return {
                'message': 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m, ch·ªçn size, h·ªó tr·ª£ ƒë·∫∑t h√†ng, v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ shop. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ?',
                'quick_replies': ['T√¨m s·∫£n ph·∫©m', 'H·ªó tr·ª£ ch·ªçn size', 'H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng', 'Li√™n h·ªá h·ªó tr·ª£'],
                'actions_taken': [{'type': 'general_help', 'query': message}],
                'metadata': {'intent': 'general'}
            }


class ConversationHistoryView(APIView):
    """L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i"""
    permission_classes = [IsAuthenticated]
    
    def get(self, request, session_id=None):
        """L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i theo session_id ho·∫∑c t·∫•t c·∫£ conversations c·ªßa user"""
        if session_id:
            conversation = get_object_or_404(AIConversation, session_id=session_id, user=request.user)
            serializer = AIConversationSerializer(conversation)
            return Response(serializer.data)
        else:
            conversations = AIConversation.objects.filter(user=request.user)[:10]
            serializer = AIConversationSerializer(conversations, many=True)
            return Response(serializer.data)


class ProductRecommendationView(APIView):
    """API ƒë·ªÉ l·∫•y g·ª£i √Ω s·∫£n ph·∫©m"""
    permission_classes = [IsAuthenticated]
    
    def post(self, request):
        """L·∫•y g·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n query"""
        query = request.data.get('query', '')
        limit = request.data.get('limit', 10)
        
        if not query:
            return Response({'error': 'Query is required'}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            products = AIProductSearchService.search_products(query, request.user, limit)
            serializer = ProductSerializer(products, many=True)
            return Response({
                'products': serializer.data,
                'count': len(products),
                'query': query
            })
        except Exception as e:
            logger.error(f"Error in product recommendation: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm s·∫£n ph·∫©m'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class SizeRecommendationView(APIView):
    """API ƒë·ªÉ l·∫•y g·ª£i √Ω size"""
    permission_classes = [IsAuthenticated]
    
    def post(self, request):
        """L·∫•y g·ª£i √Ω size cho s·∫£n ph·∫©m"""
        product_id = request.data.get('product_id')
        user_info = request.data.get('user_info', {})
        
        if not product_id:
            return Response({'error': 'Product ID is required'}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            product = get_object_or_404(Product, id=product_id)
            recommendations = AISizeRecommendationService.recommend_size(
                product, 
                request.user, 
                user_info
            )
            return Response(recommendations)
        except Exception as e:
            logger.error(f"Error in size recommendation: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi g·ª£i √Ω size'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class UserPreferenceView(APIView):
    """API ƒë·ªÉ qu·∫£n l√Ω s·ªü th√≠ch user"""
    permission_classes = [IsAuthenticated]
    
    def get(self, request):
        """L·∫•y s·ªü th√≠ch c·ªßa user"""
        try:
            preference = UserPreference.objects.get(user=request.user)
            serializer = UserPreferenceSerializer(preference)
            return Response(serializer.data)
        except UserPreference.DoesNotExist:
            return Response({
                'preferred_brands': [],
                'preferred_categories': [],
                'size_preferences': {},
                'price_range': {},
                'style_preferences': []
            })
    
    def post(self, request):
        """C·∫≠p nh·∫≠t s·ªü th√≠ch c·ªßa user"""
        try:
            preference, created = UserPreference.objects.get_or_create(user=request.user)
            serializer = UserPreferenceSerializer(preference, data=request.data, partial=True)
            
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data)
            else:
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"Error updating user preferences: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·ªü th√≠ch'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def quick_action(request):
    """X·ª≠ l√Ω c√°c quick actions t·ª´ chatbox"""
    action_type = request.data.get('action_type')
    parameters = request.data.get('parameters', {})
    
    try:
        if action_type == 'view_product':
            product_id = parameters.get('product_id')
            product = get_object_or_404(Product, id=product_id)
            serializer = ProductSerializer(product)
            return Response({
                'action': 'view_product',
                'product': serializer.data
            })
        
        elif action_type == 'add_to_cart':
            # Logic th√™m v√†o gi·ªè h√†ng
            return Response({
                'action': 'add_to_cart',
                'message': 'ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng'
            })
        
        elif action_type == 'check_stock':
            product_id = parameters.get('product_id')
            color_id = parameters.get('color_id')
            size_id = parameters.get('size_id')
            
            # Logic ki·ªÉm tra t·ªìn kho
            return Response({
                'action': 'check_stock',
                'in_stock': True,
                'quantity': 10
            })
        
        else:
            return Response(
                {'error': 'Unknown action type'},
                status=status.HTTP_400_BAD_REQUEST
            )
            
    except Exception as e:
        logger.error(f"Error in quick action: {str(e)}")
        return Response(
            {'error': 'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán action'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )


# Admin Views
class AdminChatStatsView(APIView):
    """API ƒë·ªÉ l·∫•y th·ªëng k√™ chat cho admin"""
    permission_classes = [IsAdminUser]

    def get(self, request):
        """L·∫•y th·ªëng k√™ t·ªïng quan"""
        try:
            # Th·ªëng k√™ c∆° b·∫£n
            total_conversations = AIConversation.objects.count()
            total_messages = AIMessage.objects.count()
            active_conversations = AIConversation.objects.filter(is_active=True).count()

            # Th·ªëng k√™ theo ng√†y (7 ng√†y g·∫ßn nh·∫•t)
            from datetime import datetime, timedelta
            last_7_days = datetime.now() - timedelta(days=7)

            daily_stats = []
            for i in range(7):
                date = last_7_days + timedelta(days=i)
                conversations_count = AIConversation.objects.filter(
                    created_at__date=date.date()
                ).count()
                messages_count = AIMessage.objects.filter(
                    timestamp__date=date.date()
                ).count()

                daily_stats.append({
                    'date': date.strftime('%Y-%m-%d'),
                    'conversations': conversations_count,
                    'messages': messages_count
                })

            # Top actions
            top_actions = AIAction.objects.values('action_type').annotate(
                count=Count('id')
            ).order_by('-count')[:5]

            return Response({
                'total_conversations': total_conversations,
                'total_messages': total_messages,
                'active_conversations': active_conversations,
                'daily_stats': daily_stats,
                'top_actions': list(top_actions)
            })

        except Exception as e:
            logger.error(f"Error getting chat stats: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi l·∫•y th·ªëng k√™'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class AdminConversationListView(APIView):
    """API ƒë·ªÉ l·∫•y danh s√°ch conversations cho admin"""
    permission_classes = [IsAdminUser]

    def get(self, request):
        """L·∫•y danh s√°ch conversations v·ªõi ph√¢n trang"""
        try:
            page = int(request.GET.get('page', 1))
            page_size = int(request.GET.get('page_size', 20))
            search = request.GET.get('search', '')

            conversations = AIConversation.objects.select_related('user').order_by('-updated_at')

            if search:
                conversations = conversations.filter(
                    Q(user__username__icontains=search) |
                    Q(user__email__icontains=search) |
                    Q(session_id__icontains=search)
                )

            paginator = Paginator(conversations, page_size)
            page_obj = paginator.get_page(page)

            serializer = AIConversationSerializer(page_obj.object_list, many=True)

            return Response({
                'conversations': serializer.data,
                'total_pages': paginator.num_pages,
                'current_page': page,
                'total_count': paginator.count
            })

        except Exception as e:
            logger.error(f"Error getting conversations: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch conversations'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class AdminKnowledgeBaseView(APIView):
    """API ƒë·ªÉ qu·∫£n l√Ω knowledge base"""
    permission_classes = [IsAdminUser]

    def get(self, request):
        """L·∫•y danh s√°ch knowledge base"""
        try:
            knowledge_type = request.GET.get('type', '')
            search = request.GET.get('search', '')

            knowledge = AIKnowledgeBase.objects.all().order_by('-created_at')

            if knowledge_type:
                knowledge = knowledge.filter(knowledge_type=knowledge_type)

            if search:
                knowledge = knowledge.filter(
                    Q(question__icontains=search) |
                    Q(answer__icontains=search)
                )

            serializer = AIKnowledgeBaseSerializer(knowledge, many=True)
            return Response(serializer.data)

        except Exception as e:
            logger.error(f"Error getting knowledge base: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi l·∫•y knowledge base'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def post(self, request):
        """T·∫°o knowledge base m·ªõi"""
        try:
            serializer = AIKnowledgeBaseSerializer(data=request.data)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)
            else:
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"Error creating knowledge base: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi t·∫°o knowledge base'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class AdminKnowledgeBaseDetailView(APIView):
    """API ƒë·ªÉ qu·∫£n l√Ω chi ti·∫øt knowledge base"""
    permission_classes = [IsAdminUser]

    def put(self, request, pk):
        """C·∫≠p nh·∫≠t knowledge base"""
        try:
            knowledge = get_object_or_404(AIKnowledgeBase, pk=pk)
            serializer = AIKnowledgeBaseSerializer(knowledge, data=request.data, partial=True)

            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data)
            else:
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"Error updating knowledge base: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t knowledge base'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def delete(self, request, pk):
        """X√≥a knowledge base"""
        try:
            knowledge = get_object_or_404(AIKnowledgeBase, pk=pk)
            knowledge.delete()
            return Response({'message': 'ƒê√£ x√≥a th√†nh c√¥ng'})

        except Exception as e:
            logger.error(f"Error deleting knowledge base: {str(e)}")
            return Response(
                {'error': 'C√≥ l·ªói x·∫£y ra khi x√≥a knowledge base'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
